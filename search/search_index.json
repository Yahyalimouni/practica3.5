{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practica 3.5","text":""},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>Esta pr\u00e1ctica consistir\u00e1 en desplegar una aplicaci\u00f3n Flask utilizando un servidor WSGI (Gunicorn), que actuar\u00e1 como intermediario entre el servidor web Nginx y la aplicaci\u00f3n, que en este caso ser\u00e1 una aplicaci\u00f3n Flask. </p>"},{"location":"#instalar-herramientas-de-python","title":"Instalar herramientas de Python:","text":"<p>Primero instalamos el gestor de paquetes de python</p> <p></p> <p>Instalamos la herramienta para gestionar los entornos virtuales </p> <p></p>"},{"location":"#crear-proyecto","title":"Crear proyecto:","text":"<p>Creamos el directorio raiz de nuestro proyecto:</p> <p></p> <p>Cambiamos el propietario al usuario <code>yahya</code> y al grupo <code>www-data</code></p> <p></p> <p>Y tambien establecimos los permisos</p> <pre><code>sudo chmod -R 775 /var/www/flask-app\n</code></pre> <p>Creamos el archivo .env, que contiene las variables de entorno necesarias:</p> <p></p> <p>Iniciamos nuestro proyecto:</p> <p></p>"},{"location":"#flask-gunicorn","title":"Flask &amp;&amp; Gunicorn","text":"<p>Instalamos Flask y Gunicorn</p> <p></p> <p>Creamos una aplicacion simple para probar gunicorn</p> <p></p> <p>Corremos nuestro servidor flask</p> <p></p> <p>Y se aprecia que se ha desplegado correctamente:</p> <p></p> <p>Y ahora lo desplegamos usando Gunicorn:</p> <p></p> <ul> <li><code>--workers</code>: Determina cuantos procesos trabajadores van a manejar las peticiones HTTP recibidas del servidor.</li> <li><code>--bind '0.0.0.0'</code>: Indica a Gunicorn que escuche todas las interfaces</li> <li><code>wsgi</code>: es el nombre del modulo con la extencion .py que se va a ejecutar.</li> <li><code>app</code>: es el nombre de instancia dentro del modulo wsgi.</li> </ul> <p></p> <p>Determinamos la ruta donde se encuentra instalado el ejecutable de Gunicorn.</p> <p></p> <p></p> <p>Inicializamos el servidor <code>nginx</code>:</p> <p></p> <p></p> <p>Crear un servicio externo para Gunicorn para que se ejecute automaticamente sin tener que manejarlo desde la terminal</p> <p></p> <p></p> <p>Iniciar el servicio gunicorn de nuestra app</p> <p></p> <p></p> <p>Configuramos nuestro servidor nginx estableciendo un proxy que redirigira las peticiones al servidor de Gunicorn</p> <p></p> <p></p> <p>Habilitamos la configuracion:</p> <p></p> <p></p> <p>Inicializamos nginx con la configuracion establecida</p> <p></p> <p>Accedemos desde nuestra maquina anfitriona a nuestra applicacion alojada en nuestro servidor web despues haber puesto el nombre de nuestro nombre de dominio con la ip de la maquina virtual</p> <p></p>"},{"location":"#ejercicio","title":"Ejercicio:","text":"<p>Se han aplicado todos los pasos anteriores al proyecto del repositorio:</p> <pre><code>https://github.com/raul-profesor/Practica-3.5\n</code></pre> <p></p> <p></p> <p>Se aprecia que se ha desplegado correctamente, y se ha podido acceder a el desde la maquina anfitriona.</p>"},{"location":"#wsgi","title":"WSGI:","text":""},{"location":"#definicion","title":"Definicion","text":"<p>WSGI (Web Server Gateway Interface) es un est\u00e1ndar que define c\u00f3mo los servidores web deben interactuar con las aplicaciones web escritas en Python. Este est\u00e1ndar permite el despliegue de aplicaciones como Django y Flask, asegurando que sean portables y puedan ser ejecutadas en cualquier servidor compatible. Un ejemplo de servidor compatible con WSGI es Gunicorn, que act\u00faa como intermediario entre el servidor web (como Nginx) y la aplicaci\u00f3n Python, gestionando las solicitudes HTTP y pas\u00e1ndolas a la aplicaci\u00f3n para su procesamiento.</p>"},{"location":"#flujo","title":"Flujo","text":"<ol> <li>Cliente realiza una solicitud HTTP (por ejemplo, para una p\u00e1gina web).</li> <li>Nginx recibe la solicitud, gestiona conexiones y archivos est\u00e1ticos, y la pasa a Gunicorn.</li> <li>Gunicorn recibe la solicitud, la env\u00eda a la aplicaci\u00f3n Python (como Flask o Django) a trav\u00e9s de WSGI.</li> <li>La aplicaci\u00f3n Python procesa la solicitud, genera una respuesta y la devuelve a Gunicorn.</li> <li>Gunicorn pasa la respuesta de vuelta a Nginx.</li> <li>Nginx devuelve la respuesta final al cliente (por ejemplo, renderiza la p\u00e1gina web en el navegador).</li> </ol>"}]}